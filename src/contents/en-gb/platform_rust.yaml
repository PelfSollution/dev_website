pageNav: 
  name: SAFE App Tutorial for Rust
  href: "#pageHeading"
  nav1:
    name: Outline
    href: "#outline"
  nav2:
    name: Pre-requisites
    href: "#preReq"
    subNavs:
      sub1:
        name: Install a SAFE Browser
        href: "#installBrowser"
      sub2:
        name: Installing Rust dependencies
        href: "#installRustDep"
  nav3:
    name: Authenticating an application
    href: "#authApp"
    subNavs:
      sub1:
        name: Requesting access from Authenticator
        href: "#reqAuthAccess"
      sub2:
        name: Connecting to the network
        href: "#connectNetwork"
      sub3:
        name: Real network connection
        href: "#realNetworkConn"
      sub4:
        name: Mock network connection
        href: "#mockNetworkConn"
  nav4:
    name: Using SAFE Core API
    href: "#usingSafeCoreApi"
    subNavs:
      sub1:
        name: Interacting with the network
        href: "#interactingWithNetwork"
      sub2:
        name: Create a public Mutable Data
        href: "#createPublicMD"
      sub3:
        name: Read Mutable Data entries
        href: "#readMDEntries"
      sub4:
        name: Update and remove entries
        href: "#updateRemoveEntries"


pageTitle: SAFE App Tutorial for Rust
safeRust:
  para1: This tutorial is intended for Rust developers. We’ll try to create a simple application that will work in a terminal.
outline:
  title: Outline
  list1:
    list1_1: Pre-requisites; installing SAFE App.
    list1_2: Authenticating an application with Authenticator or SAFE Browser.
    list1_3: Using SAFE Core API and futures.
    list1_4: Implementing the application logic.
preRequisites:
  title: Pre-requisites
  installBrowser:
    title: Installing SAFE Browser
    para1: Since the application will be authorising with the Authenticator to get the credentials needed to then connect to the SAFE Network, we first need to have an instance of the SAFE Browser installed.
    para2:
      chunk1: You can find the links to download the SAFE Browser package from 
      link1:
        name: MaidSafe’s website
        href: https://maidsafe.net/
      chunk2: ", or directly from the"
      link2: 
        name: SAFE Browser GitHub releases repository
        href: https://github.com/maidsafe/safe_browser/releases
      chunk3: ". It’s recommended to always use the latest available version."
    para3: "Note that there are packages for each of the supported platforms, i.e. Linux, Windows and macOS. Also note there are two type of packages for each of the supported platforms:"
    list1:
      list1_1:
        highlight1: safe-browser-<version>-<platform>.zip
        chunk1: ": SAFE Browser package built to use the live SAFE Network"
      list1_2:
        highlight1: safe-browser-mock-<version>-<platform>.zip
        chunk1: ": SAFE Browser package built to use the mock routing. This will create a local temporary file and you won’t need to connect to the live network."
    para4: In this tutorial we will be using the SAFE Browser package that is built to work with the mock network. So please go ahead and download the one corresponding for your platform, unzip the package in your PC, execute it, and please create an account from the Authenticator. You can enter any string when you are requested for the “Invitation token”.
    para5: After you finished creating your account, please keep the browser open and logged in your account before proceeding with next steps.
  installRustDep:
    title: Installing Rust dependencies
    para1: "To start building apps in Rust, you need to create a binary project as usual, using Cargo:"
    code1: |
            cargo new --bin sample_safe_app
    para2:
      chunk1: Then you need to include dependencies in
      highlight1: Cargo.toml
      chunk2: ". The only ones we are going to need are the following:"
    code2: |
            [dependencies]
            safe_app = "~0.6.0"
            safe_core = "~0.29.0"
            system_uri = "~0.4.0"
            futures = "~0.1.0"
authApp:
  title: Authenticating an application
  para1: To start working with the SAFE Network, we’ll need to define our application first and authorise it within an Authenticator.
  reqAuthAccess:
    title: Requesting access from Authenticator
    para1: As a first thing, we need to register our app with a user’s account. This is required because our app will be acting on a user’s behalf and they need to explicitly allow to do that. This is performed by the means of sending an inter-process communication (or IPC) request to the Authenticator (which is usually integrated with SAFE Browser).
    para2:
      chunk1: The IPC requests are transparent for developers and users. Let’s try to create a simple request to authorise our app. It starts with the
      highlight1: AuthReq
      chunk2: "structure describing a name of application we’re trying to register:"
    code1: |
            use safe_core::ipc::*;

            let app_info = AppExchangeInfo {
                // This is a unique ID of our app.
                id: "sample_safe_app",

                // Scope of the app.
                scope: None,

                // User-facing name of our app. It will be shown
                // in the Authenticator user's interface.
                name: "Sample SAFE App",

                // This is the vendor of the app.
                vendor: "Tutorial",
            };
    para3:
      chunk1: Now we construct the authentication request by using the
      highlight1: AuthReq
      chunk2: "struct:"
    code2: |
            let authentication_request = AuthReq {
                app: app_info,
                app_container: false,
                containers: HashMap::new(),
            };
    para4:
      chunk1: Next, we need to wrap it up in the
      highlight1: IpcMsg
      chunk2: "structure representing the IPC message we’re sending to the Authenticator:"
    code3: |
            let ipc_message = IpcMsg::Req {
                req_id: 123,
                req: IpcReq::Auth(authorisation_request)
            };

            let encoded_ipc_message = encode_msg(&ipc_message);
    para5:
      chunk1: This
      highlight1: IpcMsg
      chunk2: struct actually supports several other types of messages. You can look them up in the
      link1:
        name: API documentation
        href: https://docs.rs/safe_core/0.29.0/safe_core/ipc/enum.IpcMsg.html
      chunk3: "."
    para6:
      chunk1: Finally, we have the base64-encoded IPC request. We can now send it with
      highlight1: system_uri
      chunk2: ":"
    code4: |
            use system_uri::open;

            open(encoded_ipc_message);
  connectNetwork:
    title: Connecting to the network
    para1:
      chunk1: Finally, now that we have the
      highlight1: AuthGranted
      chunk2: "structure that will have our application keys, we can connect to the network:"
    code1: |
            App::registered("sample_safe_app", auth_granted, || ())
    para2: "However, there’s a last bit that is missing before we can actually work with the network: your application needs to know where it should connect – whether it will be the Alpha 2 network, your local network instance, or the mock network implementation."
  realNetworkConn:
    title: Real network connection
    para1:
      chunk1: "Your application will need a Crust configuration file that will contain the addresses of the SAFE Network bootstrap servers. You can use the default one that connects to the well-known Alpha 2 bootstrap addresses [TODO: where to get it from]. It should have the same base name as the project’s binary filename, e.g."
      highlight1: sample_safe_app.crust.config
      chunk2: for
      highlight2: sample_safe_app
      chunk3: "."
  mockNetworkConn:
    title: Mock network connection
    para1: If you just want to test your application, it is recommended to use a mock version of SAFE App. It does not connect to the real network and won’t exhaust your limited mutations count.
    para2:
      chunk1: To use the mock network all that you need to do is to add the
      highlight1: use-mock-routing
      chunk2: feature to the project description in
      highlight2: Cargo.toml
      chunk3: ", passing it down to SAFE Core and SAFE App:"
    code1: |
            [features]
            use-mock-routing = ["safe_app/use-mock-routing", "safe_core/use-mock-routing"]
    para3: "Then we can build the project with an extra feature flag:"
    code2: |
            cargo build --features "use-mock-routing"
    para4: You don’t need to do anything else to use the mock network version, it will be used automatically when you initialise the connection.
usingSafeCoreApi:
  title: Using SAFE Core API
  para1:
    chunk1: Now that we have instantiated our application, we can start to use the API provided by the core library, SAFE Core. The API is based on futures which is a standard way to deal with asynchronous input and output in Rust. To put it simply, you can think about
    highlight1: futures
    chunk2: as
    highlight2: Results
    chunk3: which don’t return the actual wrapped result immediately. The futures even provide API that is very similar to the one you might have used in
    highlight3: Result
    chunk4: or
    highlight4: Option
    chunk5: ":"
  code1: |
          let future = some_async_function()
            .and_then(move |result| {
              // in the `result` variable we now have the
              // output of the async function call
              ...
            });
  para2:
    chunk1: However, the futures use guide is out of the scope of this tutorial, so please follow the
    link1: 
      name: documentation
      href: https://docs.rs/futures/0.1.0/futures/
    chunk2: for details.
  interactingWithNetwork:
    title: Interacting with the network
    code1: |
            app.send(move |client| {
                <client>
            });
  createPublicMD:
    title: Create a public Mutable Data
    code1: |
            let md = MutableData::new();
            client.put_mdata(MD);
  readMDEntries:
    title: Read Mutable Data entries
    code1: |
            client.list_mdata_entries();
            client.get_mdata_value();
  updateRemoveEntries:
    title: Update and remove entries
    code1: |
            client.mutate_mdata_entries();
  