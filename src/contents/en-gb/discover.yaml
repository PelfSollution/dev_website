intro:
 para1: The SAFE Network is a secure, autonomous, data-centric, peer-to-peer network. Files stored on the network are split up into pieces, encrypted and spread throughout the network, rather than residing on a central server or data centre. 
 para2: To enable this there are a number of components and features that make the Network - 
 para3:  
authenticator:
  title: The Authenticator
  desc: Before browsing on the SAFE Network, users need to create an account via the Authenticator application. The Authenticator, enables users to securely authenticate themselves onto the SAFE Network, and protects network login credentials from apps. It also manages application authorisations - applications must be authorised by the user - to be able to connect to the SAFE Network, on behalf of the user. The user can revoke the granted access at any time from the Authenticator.
  steps:
    - title: Application requests access
      desc: The application authorises with the Authenticator with the needed access permissions. The application can create its own container, and request access to default containers or other applications' containers through the authorisation request.
    - title: User grants access
      desc: When the user approves the request, application specific encryption keys are generated. The application will be identified in the network using its keys. When the user grants or denies authorisation, the application will receive a URI.
    - title: Application connects to the Network
      desc: Applications can connect to the SAFE Network on behalf of the user by using the URI received.
networks:
  title: Network Types
  desc: Applications can be developed on the Network using one of the three network types depending on development stages.
  types:
    - name: Mock Routing
      id: mockRouting
      para1: When a website or application is built with mock-routing enabled, it’s not connecting to a live network - it is interfacing with a local database, created on your system, to simulate network operations.
      para2: This saves a great deal of time and provides a safe space for you to initially test operations.
      btnLink:
        name: Know more
        link: '#'
    - name: Local Network
      id: localNetwork
      para1: When the SAFE Browser, or another application, is built with mock-routing enabled, it’s not connecting to a live network, it’s interfacing with a local database that is created on your system to simulate network operations.
      para2: This saves a great deal of time and provides a safe space for your application or website to initially test operations.
      btnLink:
        name: Know more
        link: '#'
    - name: Actual Routing
      id: actualRouting
      para1: When the SAFE Browser, or another application, is built with mock-routing enabled, it’s not connecting to a live network, it’s interfacing with a local database that is created on your system to simulate network operations.
      para2: This saves a great deal of time and provides a safe space for your application or website to initially test operations.
      btnLink:
        name: Know more
        link: '#'
vault:
  title: Vault
  desc: When a user uploads (or saves) a ﬁle to the Network, via one of the SAFE Network apps, the file is automatically broken up into chunks. These chunks are then encrypted (encoded so that only authorised parties can read it), randomised and stored on the vaults of other SAFE Network users. These encrypted chunks are completely unreadable and inaccessible to anyone other than the owner.
  btnLink:
    name: Develop
    link: '#'
containers:
  title: Default Containers
  desc: "The SAFE Network follows a similar pattern of providing default containers. Default containers can be shared by applications when the user grants the needed permission. The default containers are:"
  quote: The data stored in the containers must be encrypted, except for the _public container.
  list:
    - title: _documents
      desc: To store document related data
      icon: document
    - title: _downloads
      desc: To store downloaded content
      icon: download
    - title: _music
      desc: To store music files
      icon: music
    - title: _pictures
      desc: To store images
      icon: pictures
    - title: _videos
      desc: To store videos
      icon: videos
    - title: _public
      desc: To store unencrypted data
      icon: public
    - title: _publicNames
      desc: To store public name to looked up public information
      icon: pubNames
dataTypes:
  title: Data Types
  desc: The SAFE Network provides two data types to store and retrieve data Mutable Data and Immutable Data:"" 
  types:
    - name: Immutable Data
      features:
        - title: About
          para: Immutable Data objects are stored at predictable locations on the network:"" an address (XorName) of an Immutable Data object is the hash of its contents. This makes Immutable Data objects self-verified:"" it is not possible to change the contents without affecting the hash. Currently, the maximum allowed size of a data object is roughly 1MB. If users want to store large files, the network will split them into multiple chunks.
        - title: Flavours
          para: Immutable Data objects are stored at predictable locations on the network:"" an address (XorName) of an Immutable Data object is the hash of its contents. This makes Immutable Data objects self-verified:"" it is not possible to change the contents without affecting the hash. Currently, the maximum allowed size of a data object is roughly 1MB. If users want to store large files, the network will split them into multiple chunks.
    - name: Mutable Data
      features:
        - title: About
          para: Mutable Data objects are key-value mappings. Each Mutable Data has an owner and owners are free to modify the data by adding new values or updating existing ones. Mutable Data objects also provide access control:"" it is possible to set fine-grained permissions to allow other users or apps to modify the Mutable Data contents. This feature allows apps to explicitly ask users for permission to act and store data on their behalf. Mutable Data objects and their values are versioned:"" even the owner cannot update the content silently.
        - title: Flavours
          para: Mutable Data objects are key-value mappings. Each Mutable Data has an owner and owners are free to modify the data by adding new values or updating existing ones. Mutable Data objects also provide access control:"" it is possible to set fine-grained permissions to allow other users or apps to modify the Mutable Data contents. This feature allows apps to explicitly ask users for permission to act and store data on their behalf. Mutable Data objects and their values are versioned:"" even the owner cannot update the content silently.

